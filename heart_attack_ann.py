# -*- coding: utf-8 -*-
"""Heart_attack_ANN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QiZaPlmfXoRKg3nGa9BWEXWQZzHwOJrK

**Parameters**
1. age of patient
2. sex: 1= male and 0=female
3. cp: form of heart failure
4. trtbps: person's resting blood pressure
5. chol: cholestrol
6. fbs: fasting blood sugar(>120,1=true,0=false)
7.restecg: resting electrocardiographic result
8.thalachh: maximum heartrate
9.exng: exercise induced angina(1=pain,0=not pain)
10.oldpeak: ST depression induced by exercise relative to rest
11.slp:the slope of the peak exercise ST segment
12.caa:number of major vessels (0-3) colored by flourosopy
13.thall: inherited blood disorder that causes your body to have less hemoglobin than normal

**Output**:
1=high risk of heart attack
, 0=very lower risk of heart attack

**Importig libraries**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""**Importing dataset**"""

dataset=pd.read_csv('heart.csv')
x=dataset.iloc[:,:-1].values
y=dataset.iloc[:,-1].values

"""**Visualizing data**"""

df=pd.DataFrame(dataset)
df.head()

df.corr()

sns.heatmap(df.corr())

plt.figure(figsize=(20,10))
plt.title("Age of patient")
plt.xlabel('Age')
sns.countplot(x='age',data=df)

plt.figure(figsize=(20,10))
plt.title("Sex of patient: 0=female, 1=male")
plt.xlabel('Sex')
sns.countplot(x='sex',data=df)

cp_data= df['cp'].value_counts().reset_index()
cp_data['index'][3]= 'asymptomatic'
cp_data['index'][2]= 'non-anginal'
cp_data['index'][1]= 'Atyppical Anigma'
cp_data['index'][0]= 'Typical Anigma'
cp_data

plt.figure(figsize=(20, 10))
plt.title("Chest Pain of Patients")

sns.barplot(x=cp_data['index'],y= cp_data['cp'])

ecg_data= df['restecg'].value_counts().reset_index()
ecg_data['index'][0]= 'normal'
ecg_data['index'][1]= 'having ST-T wave abnormality'
ecg_data['index'][2]= 'showing probable or definite left ventricular hypertrophy by Estes'

ecg_data

plt.figure(figsize=(20, 10))
plt.title("ECG data of Patients")

sns.barplot(x=ecg_data['index'],y= ecg_data['restecg'])

#sns.pairplot(df,hue='output')

plt.figure(figsize=(20,10))
plt.subplot(1,2,1)
sns.distplot(df['trtbps'], kde=True, color = 'magenta')
plt.xlabel("Resting Blood Pressure (mmHg)")
plt.subplot(1,2,2)
sns.distplot(df['thalachh'], kde=True, color = 'teal')
plt.xlabel("Maximum Heart Rate Achieved (bpm)")

plt.figure(figsize=(10,10))
sns.distplot(df['chol'],  kde=True,color = 'red')
plt.xlabel("Cholestrol")

"""**Splitting dataset**"""

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)

"""**Feature Scaling**"""

from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
x_train=sc.fit_transform(x_train)
x_test=sc.transform(x_test)

"""**Building ANN**"""

import tensorflow as tf
ann=tf.keras.models.Sequential()

ann.add(tf.keras.layers.Dense(units=128,activation='relu'))
ann.add(tf.keras.layers.Dropout(0.6))
ann.add(tf.keras.layers.Dense(units=128,activation='relu'))
ann.add(tf.keras.layers.Dropout(0.6))
ann.add(tf.keras.layers.Dense(units=1,activation='sigmoid'))

"""**Training the ANN**"""

ann.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])

#tf.keras.callbacks.EarlyStopping(monitor='val_loss',mode='min',verbose=1,patience=50)

# the PATIENCE is set to five epochs, which means the training will terminate only if there is
# no improvement in the monitor performance measure for five epochs in a row.
#ann.fit(x_train,y_train,batch_size=32,epochs=100,validation_data=(x_test,y_test))

#pd.DataFrame(ann.history.history).plot()

ann.fit(x_train,y_train,batch_size=32,epochs=100,validation_data=(x_test,y_test))

pd.DataFrame(ann.history.history).plot()

es=tf.keras.callbacks.EarlyStopping(monitor='loss',mode='min',verbose=1,patience=5,min_delta=0)
ann.fit(x_train,y_train,batch_size=32,epochs=1000,validation_data=(x_test,y_test),callbacks=[es])

pd.DataFrame(ann.history.history).plot()
plt.xlabel('epochs')

y_pred_train=ann.predict(x_train)
y_pred_train=(y_pred_train>0.5)
#print(np.concatenate((y_pred_train.reshape(len(y_pred_train),1),y_train.reshape(len(y_train),1)),1))

y_pred_test=ann.predict(x_test)
y_pred_test=(y_pred_test>0.5)
#print(np.concatenate((y_pred_test.reshape(len(y_pred_test),1),y_test.reshape(len(y_test),1)),1))

"""**Confusion matrix**"""

from sklearn.metrics import confusion_matrix,accuracy_score
cm1=confusion_matrix(y_train,y_pred_train)
print(cm1)
accuracy_score(y_train,y_pred_train)

cm=confusion_matrix(y_test,y_pred_test)
print(cm)
accuracy_score(y_test,y_pred_test)